#pragma once

namespace engine::hades
{
	struct TransitionHelper
	{
		float mEaseIn;
		float mEaseOut;
		float mTimeModifierFraction;
		std::function<void(void)> mOnUpdate;
		bool mInitialized;
		bool mPingPong;
		bool mAngleValues;
		bool mSmoothStep;
		float mStartValue;
		float mEndValue;
		float mDuration;
		float mTimeRemaining;
		float mFraction;
		float mUndoModifier;
		float mPhaseOffset;
	};
	struct AnimationDataDef
	{
		bool mFlipHorizontal;
		bool mRandomFlipHorizontal;
		bool mFlipWithMap;
		bool mFlipVertical;
		bool mRandomFlipVertical;
		bool mUseAttachedSpriteEffects;
		bool mUseAttachedFlasher;
		bool mUseAttachedShake;
		bool mUseAttachedTimeMultiplier;
		bool mUseAttachedAddColor;
		bool mPingPongShiftOverDuration;
		bool mDieOnTouchdown;
		bool mRequiresUnblocked;
		bool mUseBoundsFromOwner;
		bool mUseBoundsForSortArea;
		bool mMaintainAlphaOnly;
		bool mPingPongAngle;
		bool mUseOwnAngle;
		bool mUseFrameAngleFromOwner;
		bool mUseVelocityAngleFromOwner;
		bool mVisualFxUse3DAngle;
		bool mVisualFxUseLocationSincePrevSpawn;
		bool mMirror;
		bool mMirrorInverted;
		bool mFlipOffset;
		bool mDrawBehindOwner;
		bool mReRandomizeOnLoop;
		bool mLoop;
		bool mLoopFramesOnly;
		bool mHoldLastFrame;
		bool mPlayBackwards;
		bool mPingPong;
		bool mTransferChildren;
		bool mTransferFrameFromThis;
		bool mTransferFrameToThis;
		bool mTransferDrawLayer;
		bool mTransferAngle;
		bool mTransferScale;
		bool mTransferCopyBody;
		bool mSetOwnerAngle;
		bool mSetOwnerEndAngle;
		bool mSnapOwnerToCurrentAngle;
		bool mSnapOwnerToAvailableAngle;
		bool mDisableOwnerInput;
		bool mDisableOwnerWeapons;
		bool mDisableOwnerRotation;
		bool mDisableOwnerInteract;
		bool mDisableOwnerManualInteract;
		bool mDisableOwnerPass;
		bool mOwnerUntargetable;
		bool mOwnerInvulnerable;
		bool mOwnerNoArmorCoverage;
		bool mOwnerNoInvulnerableCoverage;
		bool mOwnerHasNoCollision;
		bool mOwnerImmobile;
		bool mShakeVertical;
		bool mShakeHorizontal;
		bool mUseChildZWobble;
		bool mUseAttachedParallax;
		bool mUseAttachedGroup;
		bool mStopSlideSoundsOnFinishFade;
		bool mAllowSoundsSuppressed;
		bool mUnsuppressSoundsOnLoop;
		bool mReplaySoundOnLoop;
		bool mCancelOnOwnerMove;
		bool mCancelWeaponCharges;
		bool mOwnerApplyGroundFriction;
		bool mPingPongScale;
		bool mUseAttachedTipLocation;
		bool mUseIsometricAngle;
		bool mCanCancelAsAttached;
		bool mCancelAllAttached;
		bool mSmoothStep;
		bool mScaleUniform;
		bool mRandomRotation;
		bool mRandomRotationZ;
		bool mRotateWithGravity;
		bool mOffsetFromParentZ;
		bool mUseParentOffset;
		bool mUseOwnerAnimOffset;
		bool mRandomStartFrame;
		bool mRandomStartFraction;
		bool mPingPongColor;
		bool mFlashExpireAfterCycle;
		bool mFlashAtStart;
		bool mAddColor;
		bool mAllowRestart;
		bool mRequiresAlive;
		bool mBlockNewOwnerAnims;
		bool mDieWithOwner;
		bool mDieWithChild;
		bool mKeepVisualFxAttached;
		bool mMakeVisualFxChildren;
		bool mCancelOverCap;
		bool mOverlayVfx;
		bool mOnlyWhenVisible;
		bool mAirborne;
		bool mVisualFxInheritAngle;
		bool mIgnoreFrameCap;
		BYTE mType[1];
		BYTE mSortMode[1];
		BYTE mColorFromOwner[1];
		BYTE mScaleFromOwner[1];
		BYTE mScaleVectorFromOwner[1];
		BYTE mAngleFromOwner[1];
		BYTE mSortFromOwner[1];
		BYTE mLocationFromOwner[1];
		BYTE mLocationZFromOwner[1];
		BYTE mIsometricSkew[1];
		float mCreateChance;
		float mDuration;
		float mRandomDurationMin;
		float mRandomDurationMax;
		float mPlaySpeed;
		float mRandomPlaySpeedMin;
		float mRandomPlaySpeedMax;
		float mCameraDistancePerFrame;
		float mXDistancePerFrame;
		float mDistancePerFrame;
		float mAngleNumAngleOffset;
		float mTimeModifierFraction;
		float mAttachedTipLocationScaleY;
		float mAngle;
		float mAngleMin;
		float mAngleMax;
		float mStartAngle;
		float mEndAngle;
		float mAngleChangeSpeed;
		float mAngleChangeSpeedMin;
		float mAngleChangeSpeedMax;
		float mAngleChangeAcceleration;
		float mPhaseOffsetAngle;
		float mRandomOffsetX;
		float mRandomOffsetY;
		float mRadialOffsetMin;
		float mRadialOffsetMax;
		float mRadialOffsetScaleY;
		float mRadialOffsetScaleRadius;
		float mOriginX;
		float mOriginY;
		float mEaseIn;
		float mEaseOut;
		float mScale;
		float mScaleMin;
		float mScaleMax;
		float mStartScale;
		float mEndScale;
		float mPhaseOffsetScale;
		float mAttachedTextScalarX;
		float mAttachedTextScalarY;
		float mScaleRadius;
		float mScaleWidth;
		float mScaleLength;
		float mScaleX;
		float mStartScaleX;
		float mEndScaleX;
		float mScaleY;
		float mStartScaleY;
		float mEndScaleY;
		float mPostRotateScaleX;
		float mPostRotateScaleY;
		float mOffsetX;
		float mOffsetY;
		float mStartOffsetX;
		float mEndOffsetX;
		float mStartOffsetY;
		float mEndOffsetY;
		float mOffsetZ;
		float mStartOffsetZ;
		float mEndOffsetZ;
		float mParentOffsetZ;
		float mRotationSpeed;
		float mRandomRotationSpeedMin;
		float mRandomRotationSpeedMax;
		float mVelocity;
		float mVelocityMin;
		float mVelocityMax;
		float mOwnerVelocityFraction;
		float mUpwardVelocity;
		float mUpwardVelocityMin;
		float mUpwardVelocityMax;
		float mGravity;
		float mAcceleration;
		float mRandomAccelerationMin;
		float mRandomAccelerationMax;
		float mPhaseOffsetShiftOverDuration;
		float mShiftSpeed;
		float mShiftSpeedMin;
		float mShiftSpeedMax;
		float mStartFraction;
		float mGhostInterval;
		float mGhostDuration;
		float mAlpha;
		float mAlphaMin;
		float mAlphaMax;
		float mHue;
		float mSaturation;
		float mValue;
		float mStartRed;
		float mEndRed;
		float mStartGreen;
		float mEndGreen;
		float mStartBlue;
		float mEndBlue;
		float mStartAlpha;
		float mEndAlpha;
		float mPhaseOffsetColor;
		float mNonHighColorChannelMultiplier;
		float mGammaCorrection;
		float mFlashSpeed;
		float mFlashMin;
		float mFlashMax;
		float mDesaturationStart;
		float mDesaturationEnd;
		float mDissolve;
		float mDistortionStrength;
		float mDistortionSpeed;
		float mDistortionTiling;
		float mDrawColorAdditionFalloff;
		float mVisualFxIntervalMin;
		float mVisualFxIntervalMax;
		float mVisualFxDistanceMin;
		float mVisualFxDistanceMax;
		float mVisualFxDistanceMinChange;
		float mVisualFxAngleOffset;
		float mVisualFxRadialInterpolationLength;
		float mVisualFxOffsetX;
		float mVisualFxOffsetY;
		float mSetOwnerAngleValue;
		float mAirborneZ;
		float mNativeMoveSpeed;
		float mShakeSpeed;
		float mRandomShakeSpeedMin;
		float mRandomShakeSpeedMax;
		float mShakeDistance;
		float mShakeDuration;
		float mShakeSpeedAcceleration;
		float mShakeDistanceAcceleration;
		float mShakeFalloffSpeed;
		float mZWobbleSpeed;
		float mZWobbleDistance;
		float mStopSoundOnFinishFade;
		float mDangerDistance;
		float mAmbient;
		float mRumble;
		float mLeftRumble;
		float mRightRumble;
		int mVisualFxManagerCap;
		int mActiveVisualFxCap;
		int mVisualFxCap;
		int mVisualFxCapMin;
		int mVisualFxCapMax;
		int mVisualFxFrameCap;
		int mSoundAllowedAfterFrame;
		int mSoundManagerCap;
		int mNumFrames;
		int mEditorFrame;
		int mDurationFrames;
		int mNumAngles;
		int mAngleNumOffset;
		int mMinValidAngle;
		int mMaxValidAngle;
		int mInvalidAngleDefault;
		int mStartFrame;
		int mEndFrame;
		engine::misc::Color mColor;
		__declspec(align(8)) engine::misc::SoundCue mEndSound;
		engine::misc::SoundCue mSound;
		engine::misc::SoundCue mFootstepSound;
		engine::misc::HashGuid mFrameDataFile;
		engine::misc::HashGuid mFilePath;
		engine::misc::HashGuid mUseAttachedMarkerLocation;
		engine::misc::HashGuid mUseAttachedFiredByMarkerLocation;
		engine::misc::HashGuid mGroupName;
		engine::misc::HashGuid mDistortionMap;
		engine::misc::HashGuid mRequireCurrentAnimationNotContains;
		engine::misc::HashGuid mDieWithoutOwnerAnimation;
		engine::misc::HashGuid mDieWithoutWeaponCharge;
		engine::misc::HashGuid mChildAnimation;
		engine::misc::HashGuid mVisualFx;
		engine::misc::HashGuid mVisualFxUseAttachedMarkerLocation;
		engine::misc::HashGuid mCreateAnimation;
		engine::misc::HashGuid mCancelAnimation;
		engine::misc::HashGuid mChainTo;
		engine::misc::HashGuid mMoveAnimation;
		engine::misc::HashGuid mStopAnimation;
		engine::misc::HashGuid mCreateAnimationOnEnd;
		engine::misc::HashGuid mFootstepFxL;
		engine::misc::HashGuid mFootstepFxR;
		engine::misc::HashGuid mLight;
		engine::misc::HashGuid mVideoTexture;
		std::vector<DWORD> mSlides; // TODO sgg::Slides
		std::vector<engine::misc::HashGuid> mRandom;
		std::vector<engine::misc::HashGuid> mCreateAnimations;
		std::vector<engine::misc::HashGuid> mRequireCurrentAnimationContains;
	};

	struct AnimationFrameData
	{
		bool mInitialized;
		int mBeginFrame;
		int mEndFrame;
		int mRenderWidth;
		int mRenderHeight;
		std::vector<D3DXVECTOR2> mFrames;
	};

	struct AnimationFrameDataSet
	{
		eastl::hash_map<engine::misc::HashGuid, AnimationFrameData, eastl::hash<engine::misc::HashGuid>, eastl::equal_to<engine::misc::HashGuid>> mDataPerMarker;
	};

	struct __declspec(align(8)) AnimationData : public engine::hades::GameData
	{
		bool mCreated;
		AnimationDataDef mDef;
		std::shared_ptr<AnimationFrameDataSet> pAnimationFrameDataSet;
		eastl::hash_map<int, engine::misc::HashGuid, eastl::hash<int>, eastl::equal_to<int>> mFrames;
		eastl::hash_map<int, DWORD64, eastl::hash<int>, eastl::equal_to<int>> mFramesCache; // TODO: Reverse textures and handles
		_RTL_CRITICAL_SECTION mFramesCacheMutex;
		bool mFramesCachePermanent;
	};
	
	class __declspec(align(64)) Animation : public engine::hades::RenderComponent
	{
		bool mPlayBackwards;
		bool mDone;
		bool mSuppressSounds;
		bool mCanceled;
		bool mUseScreenLocation;
		bool mStopLooping;
		bool mDrawableDirty;
		BYTE mUpdateResult[1];
		BYTE mLightType[1];
		float mFraction;
		float mRotationZ;
		float mTimeRemaining;
		float mFractionalFrame;
		int mSoundId;
		int mFrame;
		volatile unsigned int mPrepped;
		D3DXVECTOR2 mOrigin;
		D3DXVECTOR2 mOffset;
		D3DXVECTOR2 mLocation;
		D3DXVECTOR2 mAttachOffset;
		class BodyComponent* pAttachedBody;
		AnimationData* pData;
		class Thing* pAttachedTo;
		class Unit* pAttachedToUnit;
		Animation* pChildAnimation;
		D3DXVECTOR3 mPrevDrawLocation;
		unsigned int mDrawableIndex;
		// TODO: Finish reversing this!
	};
}